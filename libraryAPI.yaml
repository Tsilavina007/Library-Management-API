openapi: 3.0.3
info:
  title: Library Management API
  description: API for managing books and authors in a library.
  version: 1.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TsilavinaANDRIAMIHARISON/Library_Management_API/1.0.0
paths:
  /books:
    get:
      summary: Retrieve books
      parameters:
        - name: bookName
          in: query
          description: Filter by book name
          required: false
          schema:
            type: string
        - name: releaseDateStart
          in: query
          description: Filter books released after this date (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: releaseDateEnd
          in: query
          description: Filter books released before this date (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
    put:
      summary: Update a book (idempotent)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
    delete:
      summary: Delete a book
      parameters:
        - name: id
          in: query
          description: The ID of the book to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book deleted successfully

  /authors:
    get:
      summary: Retrieve authors
      parameters:
        - name: authorName
          in: query
          description: Filter by author name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Create a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
    put:
      summary: Update an author (idempotent)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully
    delete:
      summary: Delete an author
      parameters:
        - name: id
          in: query
          description: The ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Author deleted successfully

components:
  schemas:
    Book:
      type: object
      required:
        - bookName
        - author
        - pageNumbers
        - topic
        - releaseDate
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      required:
        - name
        - sex
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
